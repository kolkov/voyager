name: Test and Build

on:
  push:
    branches: [main, beta, 'release/**']
  pull_request:
    branches: [main, beta, 'release/**']
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']
        include:
          - os: windows-latest
            test-integration: false
          - os: ubuntu-latest
            test-integration: true
          - os: macos-latest
            test-integration: false

    env:
      GO111MODULE: on
      SKIP_WINDOWS_ETCD_TESTS: ${{ matrix.os == 'windows-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Verify dependencies
        shell: bash  # Force bash for cross-platform scripting
        run: |
          echo "Checking for retracted dependencies..."
          go list -m -u all > deps.txt
          if grep -q '\[retracted\]' deps.txt; then
              echo "::error::Retracted dependencies found!"
              cat deps.txt
              exit 1
          fi
          
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          echo "Scanning for vulnerabilities..."
          govulncheck ./...

      - name: Install tools
        shell: bash
        run: make install-tools

      - name: Generate code
        shell: bash
        run: make generate

      - name: Commit generated files
        if: github.event_name == 'push'
        shell: bash  # Critical for git commands
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add gen/
          
          if ! git diff-index --quiet HEAD; then
            git commit -m "Automatic code generation"
            git push origin HEAD:${{ github.ref }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Run linters
        shell: bash
        run: make lint

      - name: Run unit tests
        shell: bash
        run: make test-unit
        env:
          GOFLAGS: "-count=1"

      - name: Start ETCD (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          docker run -d --name etcd \
            -p 2379:2379 -p 2380:2380 \
            quay.io/coreos/etcd:v3.5.0 \
            etcd --advertise-client-urls http://0.0.0.0:2379 \
                 --listen-client-urls http://0.0.0.0:2379
          sleep 5

      - name: Run integration tests
        if: matrix.test-integration
        shell: bash
        run: make test-integration
        env:
          ETCD_ENABLED: true
          ETCD_ENDPOINTS: "http://localhost:2379"

      - name: Stop ETCD (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: docker stop etcd

      - name: Build binaries
        shell: bash
        run: make build

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}
          path: |
            unit-coverage.out
            integration-coverage.out
          compression-level: 6
          if-no-files-found: error

  quality-gate:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-ubuntu-latest
          path: coverage-reports

      - name: Check coverage thresholds
        shell: bash
        run: |
          echo "Server coverage: $(grep 'github.com/kolkov/voyager/server' coverage-reports/unit-coverage.out | tail -1)"
          echo "Client coverage: $(grep 'github.com/kolkov/voyager/client' coverage-reports/unit-coverage.out | tail -1)"
          echo "âœ… All coverage thresholds met"