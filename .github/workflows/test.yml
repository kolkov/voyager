name: Test and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      GO111MODULE: on
      SKIP_WINDOWS_ETCD_TESTS: ${{ matrix.os == 'windows-latest' }}

    steps:
      # Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      # Add replace directive to go.mod
      - name: Add replace directive
        run: |
          echo "replace github.com/kolkov/voyager => ./" >> go.mod
          cat go.mod

      # Cache Go dependencies for faster builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ./.bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install Protocol Buffers compiler
      - name: Install protoc
        shell: pwsh
        run: |
          $version = "22.3"
          $os = "${{ matrix.os }}"
          $gopath = (go env GOPATH)
          
          if (-not $gopath) {
            $gopath = "$env:HOME\go"
          }
          
          Write-Host "Using GOPATH: $gopath"

          if ($os -eq "macos-latest") {
              $zip = "protoc-$version-osx-x86_64.zip"
              Write-Host "Downloading $zip"
              Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v$version/$zip" -OutFile $zip
              Expand-Archive -Path $zip -DestinationPath "protoc" -Force
              sudo mv protoc/bin/protoc /usr/local/bin/
              sudo mv protoc/include/* /usr/local/include/
              Remove-Item -Recurse -Force protoc, $zip
          }
          elseif ($os -eq "windows-latest") {
              $zip = "protoc-$version-win64.zip"
              Write-Host "Downloading $zip"
              Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v$version/$zip" -OutFile $zip
              Expand-Archive -Path $zip -DestinationPath "protoc" -Force
          
              $protocPath = Join-Path $gopath "bin"
              if (-not (Test-Path $protocPath)) { 
                  New-Item -ItemType Directory -Path $protocPath | Out-Null 
              }
              Move-Item "protoc/bin/protoc.exe" $protocPath -Force
              Remove-Item -Recurse -Force protoc, $zip
          }
          else {
              $zip = "protoc-$version-linux-x86_64.zip"
              Write-Host "Downloading $zip"
              Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v$version/$zip" -OutFile $zip
              sudo unzip -o $zip -d /usr/local bin/protoc
              sudo unzip -o $zip -d /usr/local 'include/*'
              Remove-Item -Force $zip
          }
          
          if ($os -eq "windows-latest") {
              $env:PATH += ";$protocPath"
              protoc --version
          } else {
              protoc --version
          }

      # Install protoc plugins for Go
      - name: Install protoc plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0

      # Generate gRPC code from .proto definitions
      - name: Generate gRPC code
        run: make generate

      # Verify generated files
      - name: Verify generated files
        run: make verify-generated

      # Create directory for coverage reports
      - name: Create coverage directory
        run: mkdir -p coverage

      # Run linters for code quality checks
      - name: Run linters
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...
          go vet ./...

      # Run unit tests with coverage
      - name: Run unit tests
        env:
          CGO_ENABLED: 1
        shell: bash
        run: |
          # Get list of packages, excluding root directory
          PACKAGES=$(go list ./... | grep -v -e '^\.' -e '^$')
          
          if [ -z "$PACKAGES" ]; then
            echo "No Go packages found for testing"
            exit 0
          fi
          
          echo "Testing packages:"
          echo "$PACKAGES"
          
          # Run tests with coverage in separate directory
          go test -v -race -coverprofile=coverage/unit.txt -covermode=atomic $PACKAGES

      # Run integration tests (skipped on Windows)
      - name: Run integration tests
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            go test -v -tags=integration -coverprofile=coverage/integration.txt -covermode=atomic ./test/integration
          else
            echo "Skipping integration tests on Windows"
            echo "" > coverage/integration.txt
          fi

      # Combine coverage reports
      - name: Combine coverage
        shell: bash
        run: |
          # Install coverage merger
          go install github.com/wadey/gocovmerge@latest
          
          # Merge coverage reports
          gocovmerge coverage/unit.txt coverage/integration.txt > coverage/combined.txt || true
          
          # Fallback if merge failed
          if [ ! -s coverage/combined.txt ]; then
            cp coverage/unit.txt coverage/combined.txt
          fi

      # Upload coverage to Codecov
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage/combined.txt
          flags: unit,integration
          name: codecov-${{ matrix.os }}

  # Build binaries and Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      # Add replace directive to go.mod
      - name: Add replace directive
        run: |
          echo "replace github.com/kolkov/voyager => ./" >> go.mod
          cat go.mod

      - name: Install protoc
        run: |
          version=22.3
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v$version/protoc-$version-linux-x86_64.zip"
          sudo unzip -o protoc-$version-linux-x86_64.zip -d /usr/local bin/protoc
          sudo unzip -o protoc-$version-linux-x86_64.zip -d /usr/local 'include/*'
          rm protoc-$version-linux-x86_64.zip

      - name: Install protoc plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0

      - name: Generate gRPC code
        run: make generate

      - name: Build binaries
        run: make build

      - name: Build Docker images
        run: make docker

      # Upload binaries as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: bin/